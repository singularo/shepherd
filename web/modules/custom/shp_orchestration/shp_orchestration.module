<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function shp_orchestration_node_insert(EntityInterface $entity) {
  /** @var Drupal\node\Entity\Node $entity */
  $bundle = $entity->bundle();

  if (strpos($bundle, 'shp') !== FALSE) {
    // Get the plugin.
    /** @var Drupal\shp_orchestration\Plugin\OrchestrationProvider\OpenShiftOrchestrationProvider $orchestration_provider_plugin */
    $orchestration_provider_plugin = \Drupal::service('plugin.manager.orchestration_provider')->getProviderInstance();

    switch ($bundle) {
      case 'shp_distribution':

        $name = $entity->getTitle();

        $data = [
          'build_image' => $entity->field_shp_builder_image->value,
          'secret' => $entity->field_shp_ssh_key->value,
          'git' => [
            'uri' => $entity->field_shp_git_repository->value,
          ],
        ];

        $distribution = $orchestration_provider_plugin->createDistribution($name, $data);

        break;

      case 'shp_environment':
        // @todo - convert the name into some set standard.
        $name = $entity->getTitle();

        if (isset($entity->field_shp_site->target_id)) {
          $site = $entity->get('field_shp_site')
            ->first()
            ->get('entity')
            ->getTarget()
            ->getValue();

          if (isset($site->field_shp_distribution->target_id)) {
            $distribution = $site->get('field_shp_distribution')
              ->first()
              ->get('entity')
              ->getTarget()
              ->getValue();
          }
        }

        // If we have no distro, we can't do teh berks.
        // @todo - This should be a validation level hook.
        if (!isset($distribution)) {
          return FALSE;
        }

        $data = [
          'git' => [
            'ref' => $entity->field_shp_git_reference->value,
            'uri' => $distribution->field_shp_git_repository->value,
          ],
          'source' => [
            'type' => 'DockerImage',
            'name' => $distribution->field_shp_builder_image->value
          ],
          'secret' => $distribution->field_shp_ssh_key->value,
          'imagestream' => [
            'name' => $name . '-stream',
            'tag' => $name . '-stream' . ':' . $entity->field_shp_git_reference->value,
          ],
        ];

        $orchestration_provider_plugin->createEnvironment($name, $data);
        break;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function shp_orchestration_node_update(EntityInterface $entity) {
  $bundle = $entity->bundle();

  if (strpos($bundle, 'shp') !== FALSE) {
    /** @var Drupal\shp_orchestration\Plugin\OrchestrationProvider\OpenShiftOrchestrationProvider $orchestration_provider_plugin */
    $orchestration_provider_plugin = \Drupal::service('plugin.manager.orchestration_provider')
      ->getProviderInstance();

    switch ($entity->bundle()) {
      case 'shp_distribution':
        // TODO: Handle updates
        //$orchestration_provider_plugin->updateDistribution();

        break;
      case 'shp_environment':
        // TODO: Handle updates
        //$orchestration_provider_plugin->updateEnvironment();
        break;
    }
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function shp_orchestration_form_node_form_alter(&$form, FormStateInterface $form_state) {
  if ($form_state->getFormObject()->getEntity()->bundle() === 'shp_distribution') {
    // Add the validator
    $form['#validate'][] = 'shp_orchestration_shp_distribution_form_validate';
  }
}

function shp_orchestration_shp_distribution_form_validate($form, FormStateInterface $form_state) {
  // Verify that the secret exists on openshift.
  $secret_name = $form_state->getValue('field_shp_ssh_key')[0]['value'];

  /** @var Drupal\shp_orchestration\Plugin\OrchestrationProvider\OpenShiftOrchestrationProvider $orchestration_provider_plugin */
  $orchestration_provider_plugin = \Drupal::service('plugin.manager.orchestration_provider')->getProviderInstance();

  $response = $orchestration_provider_plugin->getSecret($secret_name);
  // The client will respond FALSE if the status code doesn't return a 200.
  if (!$response) {
    $form_state->setErrorByName('field_shp_ssh_key', t('Secret : ' . $secret_name . ' does not exist.'));
  }

}
