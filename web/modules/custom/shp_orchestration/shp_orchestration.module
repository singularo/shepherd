<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 *
 * @return boolean
 */
function shp_orchestration_node_insert(EntityInterface $entity) {
  /** @var Drupal\node\Entity\Node $entity */
  $bundle = $entity->bundle();

  if (strpos($bundle, 'shp') !== FALSE) {
    // Get the plugin.
    /** @var Drupal\shp_orchestration\OrchestrationProviderInterface $orchestration_provider_plugin */
    $orchestration_provider_plugin = \Drupal::service('plugin.manager.orchestration_provider')->getProviderInstance();

    switch ($bundle) {
      case 'shp_distribution':
        $result = $orchestration_provider_plugin->createdDistribution(
          $entity->getTitle(),
          $entity->field_shp_builder_image->value,
          $entity->field_shp_git_repository->value,
          // @todo Consider fetching default source ref from config.
          'master',
          $entity->field_shp_build_secret->value
        );

        if (!$result) {
          // @todo Handle errors.
          return FALSE;
        }
        break;

      case 'shp_environment':

        // @todo - these should be required fields.
        if (isset($entity->field_shp_site->target_id)) {
          $site = $entity->get('field_shp_site')
            ->first()
            ->get('entity')
            ->getTarget()
            ->getValue();

          if (isset($site->field_shp_distribution->target_id)) {
            $distribution = $site->get('field_shp_distribution')
              ->first()
              ->get('entity')
              ->getTarget()
              ->getValue();
          }
        }
        if (!isset($distribution)) {
          // @todo Handle errors.
          return FALSE;
        }

        // Collate environment variables and secrets.
        $env_vars = \Drupal::moduleHandler()->invokeAll('shp_env_vars', [$entity]);
        $secrets = \Drupal::moduleHandler()->invokeAll('shp_secrets', [$entity]);

        $result = $orchestration_provider_plugin->createdEnvironment(
          $distribution->getTitle(),
          $site->field_shp_short_name->value,
          $entity->id(),
          $entity->toUrl('canonical', ['absolute' => TRUE])->toString(),
          $distribution->field_shp_builder_image->value,
          $distribution->field_shp_git_repository->value,
          $entity->field_shp_git_reference->value,
          $distribution->field_shp_build_secret->value,
          $env_vars,
          $secrets
        );

        if (!$result) {
          // @todo Handle errors.
          return FALSE;
        }
        break;
    }
  }
  return TRUE;
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 */
function shp_orchestration_node_update(EntityInterface $entity) {
  $bundle = $entity->bundle();

  if (strpos($bundle, 'shp') !== FALSE) {
    /** @var Drupal\shp_orchestration\OrchestrationProviderInterface $orchestration_provider_plugin */
    $orchestration_provider_plugin = \Drupal::service('plugin.manager.orchestration_provider')
      ->getProviderInstance();

    switch ($entity->bundle()) {
      case 'shp_distribution':
        // TODO: Handle updates.
        $name = $entity->getTitle();

        $data = [
          'build_image' => $entity->field_shp_builder_image->value,
          'secret' => $entity->field_shp_build_secret->value,
          'git' => [
            'uri' => $entity->field_shp_git_repository->value,
          ],
        ];

        $distribution = $orchestration_provider_plugin->updateDistribution($name, $data);

        break;

      case 'shp_environment':
        // TODO: Handle updates.
        break;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 */
function shp_orchestration_node_delete(EntityInterface $entity) {
  $bundle = $entity->bundle();

  if (strpos($bundle, 'shp') !== FALSE) {
    /** @var Drupal\shp_orchestration\OrchestrationProviderInterface $orchestration_provider_plugin */
    $orchestration_provider_plugin = \Drupal::service('plugin.manager.orchestration_provider')
      ->getProviderInstance();

    switch ($entity->bundle()) {
      case 'shp_environment':
        $site = $entity->get('field_shp_site')
          ->first()
          ->get('entity')
          ->getTarget()
          ->getValue();

        if (isset($site->field_shp_distribution->target_id)) {
          $distribution = $site->get('field_shp_distribution')
            ->first()
            ->get('entity')
            ->getTarget()
            ->getValue();
        }

        $result = $orchestration_provider_plugin->deletedEnvironment(
          $distribution->title->value,
          $site->title->value,
          $entity->title->value,
          $entity->id()
        );
        break;
    }
  }
  return;
}

/**
 * Implements hook_form_node_form_alter().
 *
 * @param array $form
 * @param Drupal\Core\Form\FormStateInterface $form_state
 */
function shp_orchestration_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $bundle = $form_state->getFormObject()->getEntity()->bundle();

  if ($bundle === 'shp_distribution') {
    // Add the validator.
    $form['#validate'][] = 'shp_orchestration_shp_distribution_form_validate';
  }
}

/**
 * Validates distribution form.
 *
 * @param array $form
 * @param Drupal\Core\Form\FormStateInterface $form_state
 */
function shp_orchestration_shp_distribution_form_validate($form, FormStateInterface $form_state) {
  // Verify that the secret exists on openshift.
  $secret_name = $form_state->getValue('field_shp_build_secret')[0]['value'];

  /** @var Drupal\shp_orchestration\OrchestrationProviderInterface $orchestration_provider_plugin */
  $orchestration_provider_plugin = \Drupal::service('plugin.manager.orchestration_provider')->getProviderInstance();

  $response = $orchestration_provider_plugin->getSecret($secret_name);
  // The client will respond FALSE if the status code doesn't return a 200.
  if (!$response) {
    $form_state->setErrorByName('field_shp_build_secret', t('Secret: @secret_name does not exist.', ['@secret_name' => $secret_name]));
  }
}
